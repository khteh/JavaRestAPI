package com.restapi;
import java.util.List;
import java.util.Arrays;
import java.util.Collections;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import com.restapi.repository.CourseRepository;
import com.restapi.grpc.CourseGRPCAutoGenerated;
import com.restapi.grpc.CourseGRPCAutoGenerated.Course;
import com.restapi.grpc.CourseGRPCAutoGenerated.Student;
import com.restapi.grpc.CourseGRPCAutoGenerated.PhoneNumber;
import com.restapi.grpc.CourseGRPCAutoGenerated.PhoneType;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.data.redis.RedisProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisStandaloneConfiguration;
import org.springframework.data.redis.connection.jedis.JedisClientConfiguration;
import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter;
import org.springframework.web.client.RestTemplate;
@Configuration
public class AppConfig {
	public static final Log log = LogFactory.getLog(AppConfig.class);
	@Autowired
	private RedisProperties redisProperties;
	@Bean
    JedisConnectionFactory jedisConnectionFactory() {
		try {
			//log.info("redis host: "+redisProperties.getHost()+", port: "+redisProperties.getPort()+", password: "+redisProperties.getPassword());
	        RedisStandaloneConfiguration redisStandaloneConfiguration = new RedisStandaloneConfiguration(redisProperties.getHost(), redisProperties.getPort());
	        redisStandaloneConfiguration.setPassword(redisProperties.getPassword());
	        //log.info("AppConfig.jedisConnectionFactory(): "+redisProperties.getHost()+" "+redisProperties.getPort()+" "+redisProperties.getPassword());
	        JedisClientConfiguration.JedisClientConfigurationBuilder builder = JedisClientConfiguration
	                .builder()
	                .connectTimeout(redisProperties.getTimeout())
	                .readTimeout(redisProperties.getJedis().getPool().getMaxWait());
	        if (redisProperties.isSsl())
	        	builder.useSsl();
	        // Final JedisClientConfiguration
	        //JedisClientConfiguration clientConfig = builder.build();//.usePooling().build();
	        JedisClientConfiguration clientConfig = builder.usePooling().build();
	        //TODO: Later: Add configurations for connection pool sizing.
	        //Create JedisConnectionFactory
	        return new JedisConnectionFactory(redisStandaloneConfiguration, clientConfig);
		} catch (Exception e) {
			log.error("jedisConnectionFactory(): Exception!", e);
		}
		return null;
	}
	@Bean
	public RedisTemplate<Object, Object> redisTemplate(JedisConnectionFactory factory) {
		RedisTemplate<Object, Object> template = new RedisTemplate<Object, Object>();
		template.setConnectionFactory(factory);
		return template; 
	}
	@Bean
	public ProtobufHttpMessageConverter protobufHttpMessageConverter() {
		// The ProtobufHttpMessageConverter bean is used to convert responses returned by @RequestMapping annotated methods to protocol buffer messages.
		return new ProtobufHttpMessageConverter();
	}
	@Bean
	public CourseRepository createTestCourses() {
		Map<Integer, Course> courses = new HashMap<>();
		Course course1 = Course.newBuilder()
							.setId(1)
							.setName("Spring REST API")
							.addAllStudents(createTestStudents())
							.build();
		Course course2 = Course.newBuilder()
				.setId(2)
				.setName("Spring GRPC")
				.addAllStudents(new ArrayList<Student>())
				.build();
		courses.put(course1.getId(),course1);
		courses.put(course2.getId(),course2);
		return new CourseRepository(courses);
	}
	@Bean
	public RestTemplate restTemplate(ProtobufHttpMessageConverter converter) {
		return new RestTemplate(Arrays.asList(converter));
	}
	private List<Student> createTestStudents() {
		List<Student> students = new ArrayList<Student>();
		Student student1 = Student.newBuilder()
							.setId(1)
							.setFirstName("Mouse")
							.setLastName("Mickey")
							.setEmail("mickey@mouse.com")
							.addPhone(PhoneNumber.newBuilder().setNumber("+1-12345678").setType(PhoneType.MOBILE).build())
							.build();
		Student student2 = Student.newBuilder()
				.setId(1)
				.setFirstName("Donald")
				.setLastName("Duck")
				.setEmail("donald@duck.com")
				.addPhone(PhoneNumber.newBuilder().setNumber("+1-987654321").setType(PhoneType.HOME).build())
				.build();
		students.add(student1);
		students.add(student2);
		return students;
	}
}