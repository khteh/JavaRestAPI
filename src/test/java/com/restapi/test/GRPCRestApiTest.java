package com.restapi.test;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.client.RestTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.HttpResponse;
import com.restapi.grpc.CourseGRPCAutoGenerated.Course;
import com.restapi.grpc.CourseGRPCAutoGenerated.Courses;
import com.googlecode.protobuf.format.JsonFormat;
import org.springframework.http.ResponseEntity;
import static org.junit.Assert.assertThat;
import static org.hamcrest.CoreMatchers.containsString;
import java.io.InputStream;
import java.io.IOException;
@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class GRPCRestApiTest {
	private static final String COURSE_URL = "http://localhost:8888/restapi/course/1";
	private static final String ALL_COURSES_URL = "http://localhost:8888/restapi/course";
	@Autowired
	private RestTemplate restTemplate;
	private void assertResponse(String response) {
		assertThat(response, containsString("id"));
		assertThat(response, containsString("name"));
		//assertThat(response, containsString("Spring REST API"));
		//assertThat(response, containsString("Spring GRPC"));
		assertThat(response, containsString("student"));
		assertThat(response, containsString("firstName"));
		assertThat(response, containsString("lastName"));
		assertThat(response, containsString("email"));
/*		assertThat(response, containsString("mickey@mouse.com"));
		assertThat(response, containsString("donald@duck.com"));
		assertThat(response, containsString("hello@world.com"));
*/		assertThat(response, containsString("phone"));
		assertThat(response, containsString("number"));
		assertThat(response, containsString("type"));
	}
	private InputStream executeHttpRequest(String url) throws IOException {
		CloseableHttpClient httpClient = HttpClients.createDefault();
		HttpGet request = new HttpGet(url);
		HttpResponse httpResponse = httpClient.execute(request);
		return httpResponse.getEntity().getContent();
	}
	private String protobufToCourseJson(InputStream protobuf) throws IOException {
		JsonFormat json = new JsonFormat();
		Course course = Course.parseFrom(protobuf);
		return json.printToString(course);
	}
	private String protobufToCoursesJson(InputStream protobuf) throws IOException {
		JsonFormat json = new JsonFormat();
		Courses courses = Courses.parseFrom(protobuf);
		return json.printToString(courses);
	}
	@Test
	public void GetOneCourseUsingRestTemplate() throws IOException {
		ResponseEntity<Course> course = restTemplate.getForEntity(COURSE_URL, Course.class);
		assertResponse(course.toString());
	}
	@Test
	public void GetOneCourseUsingHttpClient() throws IOException {
		InputStream response = executeHttpRequest(COURSE_URL);
		String json = protobufToCourseJson(response);
		assertResponse(json);
	}
	@Test
	public void GetAllCoursesUsingRestTemplate() throws IOException {
		ResponseEntity<Courses> courses = restTemplate.getForEntity(ALL_COURSES_URL, Courses.class);
		assertResponse(courses.toString());
	}
	@Test
	public void GetAllCoursesUsingHttpClient() throws IOException {
		InputStream response = executeHttpRequest(ALL_COURSES_URL);
		String json = protobufToCoursesJson(response);
		assertResponse(json);
	}
}